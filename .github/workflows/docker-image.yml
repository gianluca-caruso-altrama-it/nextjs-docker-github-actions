name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BRANCH_NAME: master
  NAME_CONTAINER: app

jobs:

  generate_sbom:
      runs-on: ubuntu-latest
      name: Generate SBOM
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-node@v3
          with:
            node-version: '16'
        - run: npm install
        - name: Create SBOM with CycloneDX
          uses: CycloneDX/gh-node-module-generatebom@v1
          with: 
            output: './test.app.bom.xml'

  build_and_publish:
    runs-on: ubuntu-latest
    needs: generate_sbom
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4


    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
  
  Deploy:
    runs-on: self-hosted
    needs: build_and_publish
    steps:

      - name: Remove existing container on self-hosted
        if: success() || failure()
        run: |
          docker stop ${{ env.NAME_CONTAINER }} 2>/dev/null
          docker rm ${{ env.NAME_CONTAINER }} 2>/dev/null
      
      - name: Remove existing image on self-hosted
        run: |
          docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}
      - name: Login to Docker Registry
        run: | 
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin 

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Pull image from docker registry on self-hosted
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}
      - name: Create a new container from the image on self-hosted
        run: |
          docker run -d --rm -p 3000:3000 --name ${{ env.NAME_CONTAINER }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}

          